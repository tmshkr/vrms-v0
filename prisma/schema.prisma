// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider = "prisma-erd-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AppRole {
  ADMIN
  FACILITATOR
}

model AppRoleOnUser {
  role       AppRole
  user_id    Int
  user       User     @relation(fields: [user_id], references: [id])
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  @@id([user_id, role])
}

model User {
  id                  Int                  @id @default(autoincrement())
  slack_id            String               @unique
  app_roles           AppRoleOnUser[]
  created_meetings    Meeting[]
  created_projects    Project[]
  email               String
  meeting_assignments MeetingParticipant[]
  real_name           String
  team_assignments    TeamMember[]
  members_added       TeamMember[]         @relation("AddMember")
  participants_added  MeetingParticipant[] @relation("AddParticipant")
  created_at          DateTime             @default(now())
  updated_at          DateTime             @default(now())

  @@index([slack_id])
}

model Project {
  id              Int          @id @default(autoincrement())
  is_active       Boolean      @default(true)
  created_by      Int
  created_by_user User         @relation(fields: [created_by], references: [id])
  meetings        Meeting[]
  name            String
  team_members    TeamMember[]
  created_at      DateTime     @default(now())
  updated_at      DateTime     @default(now())
}

enum ProjectRole {
  OWNER
  MEMBER
}

model TeamMember {
  is_active     Boolean     @default(true)
  project       Project     @relation(fields: [project_id], references: [id])
  project_id    Int
  role          ProjectRole @default(MEMBER)
  user_id       Int
  member        User        @relation(fields: [user_id], references: [id])
  added_by      Int
  added_by_user User        @relation(name: "AddMember", fields: [added_by], references: [id])
  created_at    DateTime    @default(now())
  updated_at    DateTime    @default(now())

  @@id([user_id, project_id])
}

model Meeting {
  id               Int                  @id @default(autoincrement())
  created_by       Int
  created_by_user  User                 @relation(fields: [created_by], references: [id])
  duration         Int // in minutes
  is_active        Boolean              @default(true)
  gcal_event_id    String
  gcal_event_link  String
  google_meet_link String
  participants     MeetingParticipant[]
  project          Project              @relation(fields: [project_id], references: [id])
  project_id       Int
  rrule            String?
  slack_channel_id String
  start_date       DateTime
  title            String
  created_at       DateTime             @default(now())
  updated_at       DateTime             @default(now())
}

model MeetingParticipant {
  is_active     Boolean  @default(true)
  meeting       Meeting  @relation(fields: [meeting_id], references: [id])
  meeting_id    Int
  user_id       Int
  participant   User     @relation(fields: [user_id], references: [id])
  added_by      Int
  added_by_user User     @relation(name: "AddParticipant", fields: [added_by], references: [id])
  created_at    DateTime @default(now())
  updated_at    DateTime @default(now())

  @@id([meeting_id, user_id])
}
